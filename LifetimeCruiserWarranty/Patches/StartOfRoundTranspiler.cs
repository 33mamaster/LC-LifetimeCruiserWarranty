using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using HarmonyLib;
using MonoMod;
using MonoMod.Cil;
using TMPro;
using UnityEngine;
using GameNetcodeStuff;

namespace LifetimeCruiserWarranty.Patches
{
    [HarmonyPatch]
    public static class StartOfRoundTranspiler
    {
        // Specify the method to patch using reflection
        public static MethodBase TargetMethod()
        {
            // Locate the state machine method generated by the compiler
            var nestedType = typeof(StartOfRound).GetNestedType("<EndOfGame>d__278", BindingFlags.NonPublic);
            return AccessTools.Method(nestedType, "MoveNext");
        }

        [HarmonyTranspiler]
        public static IEnumerable<CodeInstruction> TranspileEndOfGame(IEnumerable<CodeInstruction> instructions)
        {
            var codes = new List<CodeInstruction>(instructions);
            // Locate the sequence of instructions to insert before
            for (int i = 0; i < codes.Count - 3; i++)
            {
                if (codes[i].opcode == OpCodes.Ldloc_1 &&
                    codes[i + 1].opcode == OpCodes.Ldarg_0 &&
                    codes[i + 2].opcode == OpCodes.Ldfld &&
                    codes[i + 2].operand.ToString().Contains("connectedPlayersOnServer") &&
                    codes[i + 3].opcode == OpCodes.Call &&
                    codes[i + 3].operand.ToString().Contains("PassTimeToNextDay"))
                {
                    // Replace the matched instructions with a call to DisplayPenalty method
                    List<CodeInstruction> newInstructions = new List<CodeInstruction>
                    {
                        // Call DisplayPenalty method
                        new CodeInstruction(OpCodes.Call, AccessTools.Method(typeof(StartOfRoundTranspiler), nameof(DisplayPenalty))),
                        
                        //// Set state to 6 (or an appropriate unique state number)
                        //new CodeInstruction(OpCodes.Ldarg_0),
                        //new CodeInstruction(OpCodes.Ldc_I4, 999), // Choosing a state number which is likely unused
                        //new CodeInstruction(OpCodes.Stfld, AccessTools.Field(typeof(StartOfRound).GetNestedType("<EndOfGame>d__278", BindingFlags.NonPublic), "<>1__state")),

                        // Insert a yield return new WaitForSeconds(2f);
                        new CodeInstruction(OpCodes.Ldarg_0), // Load the "this" argument
                        new CodeInstruction(OpCodes.Ldc_R4, 4f), // Load the float value 4.0
                        new CodeInstruction(OpCodes.Newobj, AccessTools.Constructor(typeof(WaitForSeconds), new Type[] { typeof(float) })), // Create new WaitForSeconds object
                        new CodeInstruction(OpCodes.Stfld, AccessTools.Field(typeof(StartOfRound).GetNestedType("<EndOfGame>d__278", BindingFlags.NonPublic), "<>2__current")), // Store it in the <>2__current 

                        //// Return true to indicate that the coroutine should yield
                        //new CodeInstruction(OpCodes.Ldc_I4_1), // Load constant 1 (true)
                        //new CodeInstruction(OpCodes.Ret)
                    };

                    // Insert the new instructions at the identified position
                    codes.InsertRange(i + 1, newInstructions);  // Unsure if +1 here is correct.

                    for (int j = i; j < codes.Count - 3; j++)
                    {
                        Plugin.Logger.LogInfo(codes[j]);
                    }
                    break;
                }
            }

            return codes.AsEnumerable();
        }
    

        private static void DisplayPenalty()
        {
            Plugin.Logger.LogInfo("Display Penalty Function");
            // Display Punishment
            HUDManager.Instance.endgameStatsAnimator.SetTrigger("displayPenalty");
            HUDManager.Instance.statsUIElements.penaltyAddition.text = $"Company Cruiser was left behind";
            HUDManager.Instance.statsUIElements.penaltyTotal.text = $"DUE: ${Plugin.due}";
        }
    }
}
